import org.w3c.dom.CanvasRenderingContext2D
import kotlin.browser.document
import kotlin.browser.window
import kotlin.js.Math


fun draw() {
    val canvas = document.getElementById("mainCanvas")!!
    println("inner: ${window.innerWidth}x${window.innerHeight} client: ${document.documentElement?.clientWidth}x${document.documentElement?.clientHeight}")
    canvas.setAttribute("width", window.innerWidth.toString())
    canvas.setAttribute("height", window.innerHeight.toString())
    val ctx = canvas.asDynamic().getContext("2d") as CanvasRenderingContext2D
    val width = canvas.clientWidth
    val height = canvas.clientHeight

    
    for (y in 0..height - 1) {
        for (x in 0..width - 1) {
            val m = mandelbrot(x, y, width, height)
            ctx.fillStyle = getColor(m)
            ctx.fillRect(x.toDouble(), y.toDouble(), 1.0, 1.0)
        }
    }
}

fun getColor(m: Double): String {
//    val colors = intArrayOf(0x7f2c2c2e, 0x7f2d2c2e, 0x7f2e2c2e, 0x7f2f2c2e, 0x7f302c2e, 0x7f312c2e, 0x7f322c2e, 0x7f332c2d, 0x7f342c2d, 0x7f362c2d, 0x7f372c2d, 0x7f382c2d, 0x7f3a2c2d, 0x7f3b2c2d, 0x7f3d2c2d, 0x7f3e2c2c, 0x7f402c2c, 0x7f422c2c, 0x7f432c2c, 0x7f452c2c, 0x7f472c2c, 0x7f482c2c, 0x7f4a2d2c, 0x7f4c2d2b, 0x7f4e2d2b, 0x7f502d2b, 0x7f522d2b, 0x7f542d2b, 0x7f562d2b, 0x7f582e2b, 0x7f5a2e2b, 0x7f5c2e2b, 0x7f5e2e2b, 0x7f602f2b, 0x7f622f2b, 0x7f642f2b, 0x7f66302b, 0x7f68302b, 0x7f69302b, 0x7f6a312b, 0x7f6b312b, 0x7f6c312b, 0x7f6d312b, 0x7f6e312b, 0x7f70322b, 0x7f71322b, 0x7f72322b, 0x7f73322b, 0x7f74322b, 0x7f76332b, 0x7f77332c, 0x7f78332c, 0x7f7a332c, 0x7f7b332c, 0x7f7c342c, 0x7f7e342c, 0x7f7f342c, 0x7f80342c, 0x7f82352c, 0x7f83352c, 0x7f84352c, 0x7f86352c, 0x7f87352c, 0x7f88362c, 0x7f8a362c, 0x7f8b362c, 0x7f8d362c, 0x7f8e372c, 0x7f90372d, 0x7f91372d, 0x7f92382d, 0x7f94382d, 0x7f95382d, 0x7f97382d, 0x7f98392d, 0x7f99392d, 0x7f9b392d, 0x7f9c3a2d, 0x7f9e3a2d, 0x7f9f3a2e, 0x7fa13b2e, 0x7fa23b2e, 0x7fa33b2e, 0x7fa53c2e, 0x7fa63c2e, 0x7fa83d2e, 0x7fa93d2e, 0x7faa3d2e, 0x7fac3e2f, 0x7fad3e2f, 0x7fae3f2f, 0x7fb03f2f, 0x7fb1402f, 0x7fb2402f, 0x7fb44130, 0x7fb54130, 0x7fb64230, 0x7fb74230, 0x7fb94330, 0x7fba4330, 0x7fbb4431, 0x7fbc4431, 0x7fbd4531, 0x7fbf4631, 0x7fc04631, 0x7fc14732, 0x7fc24832, 0x7fc34832, 0x7fc44932, 0x7fc54a33, 0x7fc64a33, 0x7fc74b33, 0x7fc84c33, 0x7fc94d34, 0x7fca4d34, 0x7fcb4e34, 0x7fcc4f34, 0x7fcd5034, 0x7fce5135, 0x7fcf5135, 0x7fcf5235, 0x7fd05335, 0x7fd15436, 0x7fd25536, 0x7fd35636, 0x7fd45736, 0x7fd55837, 0x7fd65937, 0x7fd65a37, 0x7fd75b37, 0x7fd85c38, 0x7fd95d38, 0x7fda5e38, 0x7fdb5f38, 0x7fdb6039, 0x7fdc6139, 0x7fdd6239, 0x7fde6339, 0x7fde643a, 0x7fdf653a, 0x7fe0663a, 0x7fe1673a, 0x7fe1683b, 0x7fe26a3b, 0x7fe36b3b, 0x7fe46c3c, 0x7fe46d3c, 0x7fe56e3c, 0x7fe66f3d, 0x7fe6703d, 0x7fe7723d, 0x7fe8733e, 0x7fe8743e, 0x7fe9753e, 0x7fea763f, 0x7fea783f, 0x7feb793f, 0x7feb7a40, 0x7fec7b40, 0x7fed7c41, 0x7fed7e41, 0x7fee7f41, 0x7fee8042, 0x7fef8142, 0x7fef8243, 0x7ff08443, 0x7ff08544, 0x7ff18644, 0x7ff18745, 0x7ff28845, 0x7ff28a46, 0x7ff38b46, 0x7ff38c47, 0x7ff48d47, 0x7ff48e48, 0x7ff59048, 0x7ff59149, 0x7ff6924a, 0x7ff6934a, 0x7ff6944b, 0x7ff7964c, 0x7ff7974c, 0x7ff7984d, 0x7ff8994e, 0x7ff89a4e, 0x7ff99b4f, 0x7ff99c50, 0x7ff99d50, 0x7ff99e50, 0x7ff99e51, 0x7ff99f51, 0x7ff99f51, 0x7ff9a052, 0x7ff9a052, 0x7ff9a152, 0x7ff9a153, 0x7ff9a253, 0x7ff9a254, 0x7ff9a354, 0x7ff9a354, 0x7ff9a455, 0x7ff9a455, 0x7ff9a555, 0x7ff9a556, 0x7ff9a656, 0x7ff9a657, 0x7ff9a757, 0x7ff9a757, 0x7ff9a858, 0x7ff9a858, 0x7ff9a959, 0x7ff9a959, 0x7ff9aa59, 0x7ff9aa5a, 0x7ff9ab5a, 0x7ff9ab5b, 0x7ff9ac5b, 0x7ff9ac5c, 0x7ff9ad5c, 0x7ff9ad5d, 0x7ff9ae5d, 0x7ff9af5d, 0x7ff9af5e, 0x7ff9b05e, 0x7ff9b05f, 0x7ff9b15f, 0x7ff9b160, 0x7ff9b260, 0x7ff9b261, 0x7ff9b361, 0x7ff9b462, 0x7ff9b462, 0x7ff9b563, 0x7ff9b563, 0x7ff9b664, 0x7ff9b664, 0x7ff9b765, 0x7ff9b765, 0x7ff9b866, 0x7ff9b966, 0x7ff9b967, 0x7ff9ba67, 0x7ff9ba68, 0x7ff9bb68, 0x7ff9bb69, 0x7ff9bc69, 0x7ff9bd6a, 0x7ff9bd6a, 0x7ff9be6b, 0x7ff9be6b, 0x7ff9bf6c, 0x7ff9bf6d, 0x7ff9c06d, 0x7ff9c06e, 0x7ff9c16e, 0x7ff9c26f, 0x7ff9c26f, 0x7ff9c370, 0x7ff9c370, 0x7ff9c471, 0x7ff9c471, 0x7ff9c572, 0x7ff9c672, 0x7ff9c673, 0x7ff9c774, 0x7ff9c774, 0x7ff9c875, 0x7ff9c875, 0x7ff9c976, 0x7ff9ca76, 0x7ff9ca77, 0x7ff9cb77, 0x7ff9cb78, 0x7ff9cc78, 0x7ff9cc79, 0x7ff9cd7a, 0x7ff9cd7a, 0x7ff9ce7b, 0x7ff9cf7b, 0x7ff9cf7c, 0x7ff9d07c, 0x7ff9d07d, 0x7ff9d17d, 0x7ff9d17e, 0x7ff9d27e, 0x7ff9d27f, 0x7ff9d380, 0x7ff9d380, 0x7ff9d481, 0x7ff9d481, 0x7ff9d582, 0x7ff9d682, 0x7ff9d683, 0x7ff9d783, 0x7ff9d784, 0x7ff9d884, 0x7ff9d885, 0x7ff9d985, 0x7ff9d986, 0x7ff9da86, 0x7ff9da87, 0x7ff9db87, 0x7ff9db88, 0x7ff9dc89, 0x7ff9dc89, 0x7ff9dd8a, 0x7ff9dd8a, 0x7ff9de8b, 0x7ff9de8b, 0x7ff9df8c, 0x7ff9df8c, 0x7ff9e08d, 0x7ff9e08d, 0x7ff9e18e, 0x7ff9e18e, 0x7ff9e28f, 0x7ff9e28f, 0x7ff9e38f, 0x7ff9e390, 0x7ff9e490, 0x7ff9e491, 0x7ff9e491, 0x7ff9e592, 0x7ff9e592, 0x7ff9e693, 0x7ff9e693, 0x7ff8e794, 0x7ff8e794, 0x7ff8e895, 0x7ff8e895, 0x7ff8e895, 0x7ff8e996, 0x7ff8e996, 0x7ff8ea97, 0x7ff8ea97, 0x7ff8ea98, 0x7ff8eb98, 0x7ff8eb98, 0x7ff8ec99, 0x7ff8ec99, 0x7ff8ec9a, 0x7ff8ed9a, 0x7ff8ed9a, 0x7ff8ee9b, 0x7ff8ee9b, 0x7ff8ee9b, 0x7ff8ef9c, 0x7ff8ef9c, 0x7ff7ef9d, 0x7ff7f09d, 0x7ff7f09d, 0x7ff7f09e, 0x7ff7f19e, 0x7ff7f19e, 0x7ff7f19f, 0x7ff7f29f, 0x7ff7f29f, 0x7ff7f2a0, 0x7ff7f3a0, 0x7ff7f3a0, 0x7ff7f3a0, 0x7ff7f4a1, 0x7ff7f4a1, 0x7ff7f4a1, 0x7ff7f4a2, 0x7ff7f5a2, 0x7ff7f5a2, 0x7ff7f5a2, 0x7ff7f6a3, 0x7ff7f6a3, 0x7fa74132, 0x7fa6412f, 0x7fa6412f, 0x7fa6412f, 0x7fa6412f, 0x7fa74230, 0x7fa74230, 0x7fa74230)
    val colors = intArrayOf(0x5abecf, 0x5abecf, 0xd3d3d2, 0xd2d3d2, 0xd1d3d2, 0xd0d3d2, 0xcfd3d2, 0xced3d2, 0xcdd3d2, 0xccd3d3, 0xcbd3d3, 0xc9d3d3, 0xc8d3d3, 0xc7d3d3, 0xc5d3d3, 0xc4d3d3, 0xc2d3d3, 0xc1d3d4, 0xbfd3d4, 0xbdd3d4, 0xbcd3d4, 0xbad3d4, 0xb8d3d4, 0xb7d3d4, 0xb5d2d4, 0xb3d2d5, 0xb1d2d5, 0xafd2d5, 0xadd2d5, 0xabd2d5, 0xa9d2d5, 0xa7d1d5, 0xa5d1d5, 0xa3d1d5, 0xa1d1d5, 0x9fd0d5, 0x9dd0d5, 0x9bd0d5, 0x99cfd5, 0x97cfd5, 0x96cfd5, 0x95ced5, 0x94ced5, 0x93ced5, 0x92ced5, 0x91ced5, 0x8fcdd5, 0x8ecdd5, 0x8dcdd5, 0x8ccdd5, 0x8bcdd5, 0x89ccd5, 0x88ccd4, 0x87ccd4, 0x85ccd4, 0x84ccd4, 0x83cbd4, 0x81cbd4, 0x80cbd4, 0x7fcbd4, 0x7dcad4, 0x7ccad4, 0x7bcad4, 0x79cad4, 0x78cad4, 0x77c9d4, 0x75c9d4, 0x74c9d4, 0x72c9d4, 0x71c8d4, 0x6fc8d3, 0x6ec8d3, 0x6dc7d3, 0x6bc7d3, 0x6ac7d3, 0x68c7d3, 0x67c6d3, 0x66c6d3, 0x64c6d3, 0x63c5d3, 0x61c5d3, 0x60c5d2, 0x5ec4d2, 0x5dc4d2, 0x5cc4d2, 0x5ac3d2, 0x59c3d2, 0x57c2d2, 0x56c2d2, 0x55c2d2, 0x53c1d1, 0x52c1d1, 0x51c0d1, 0x4fc0d1, 0x4ebfd1, 0x4dbfd1, 0x4bbed0, 0x4abed0, 0x49bdd0, 0x48bdd0, 0x46bcd0, 0x45bcd0, 0x44bbcf, 0x43bbcf, 0x42bacf, 0x40b9cf, 0x3fb9cf, 0x3eb8ce, 0x3db7ce, 0x3cb7ce, 0x3bb6ce, 0x3ab5cd, 0x39b5cd, 0x38b4cd, 0x37b3cd, 0x36b2cc, 0x35b2cc, 0x34b1cc, 0x33b0cc, 0x32afcc, 0x31aecb, 0x30aecb, 0x30adcb, 0x2faccb, 0x2eabca, 0x2daaca, 0x2ca9ca, 0x2ba8ca, 0x2aa7c9, 0x29a6c9, 0x29a5c9, 0x28a4c9, 0x27a3c8, 0x26a2c8, 0x25a1c8, 0x24a0c8, 0x249fc7, 0x239ec7, 0x229dc7, 0x219cc7, 0x219bc6, 0x209ac6, 0x1f99c6, 0x1e98c6, 0x1e97c5, 0x1d95c5, 0x1c94c5, 0x1b93c4, 0x1b92c4, 0x1a91c4, 0x1990c3, 0x198fc3, 0x188dc3, 0x178cc2, 0x178bc2, 0x168ac2, 0x1589c1, 0x1587c1, 0x1486c1, 0x1485c0, 0x1384c0, 0x1283bf, 0x1281bf, 0x1180bf, 0x117fbe, 0x107ebe, 0x107dbd, 0xf7bbd, 0xf7abc, 0xe79bc, 0xe78bb, 0xd77bb, 0xd75ba, 0xc74ba, 0xc73b9, 0xb72b9, 0xb71b8, 0xa6fb8, 0xa6eb7, 0x96db6, 0x96cb6, 0x96bb5, 0x869b4, 0x868b4, 0x867b3, 0x766b2, 0x765b2, 0x664b1, 0x663b0, 0x662b0, 0x661b0, 0x661af, 0x660af, 0x660af, 0x65fae, 0x65fae, 0x65eae, 0x65ead, 0x65dad, 0x65dac, 0x65cac, 0x65cac, 0x65bab, 0x65bab, 0x65aab, 0x65aaa, 0x659aa, 0x659a9, 0x658a9, 0x658a9, 0x657a8, 0x657a8, 0x656a7, 0x656a7, 0x655a7, 0x655a6, 0x654a6, 0x654a5, 0x653a5, 0x653a4, 0x652a4, 0x652a3, 0x651a3, 0x650a3, 0x650a2, 0x64fa2, 0x64fa1, 0x64ea1, 0x64ea0, 0x64da0, 0x64d9f, 0x64c9f, 0x64b9e, 0x64b9e, 0x64a9d, 0x64a9d, 0x6499c, 0x6499c, 0x6489b, 0x6489b, 0x6479a, 0x6469a, 0x64699, 0x64599, 0x64598, 0x64498, 0x64497, 0x64397, 0x64296, 0x64296, 0x64195, 0x64195, 0x64094, 0x64093, 0x63f93, 0x63f92, 0x63e92, 0x63d91, 0x63d91, 0x63c90, 0x63c90, 0x63b8f, 0x63b8f, 0x63a8e, 0x6398e, 0x6398d, 0x6388c, 0x6388c, 0x6378b, 0x6378b, 0x6368a, 0x6358a, 0x63589, 0x63489, 0x63488, 0x63388, 0x63387, 0x63286, 0x63286, 0x63185, 0x63085, 0x63084, 0x62f84, 0x62f83, 0x62e83, 0x62e82, 0x62d82, 0x62d81, 0x62c80, 0x62c80, 0x62b7f, 0x62b7f, 0x62a7e, 0x6297e, 0x6297d, 0x6287d, 0x6287c, 0x6277c, 0x6277b, 0x6267b, 0x6267a, 0x6257a, 0x62579, 0x62479, 0x62478, 0x62377, 0x62377, 0x62276, 0x62276, 0x62175, 0x62175, 0x62074, 0x62074, 0x61f73, 0x61f73, 0x61e72, 0x61e72, 0x61d71, 0x61d71, 0x61c71, 0x61c70, 0x61b70, 0x61b6f, 0x61b6f, 0x61a6e, 0x61a6e, 0x6196d, 0x6196d, 0x7186c, 0x7186c, 0x7176b, 0x7176b, 0x7176b, 0x7166a, 0x7166a, 0x71569, 0x71569, 0x71568, 0x71468, 0x71468, 0x71367, 0x71367, 0x71366, 0x71266, 0x71266, 0x71165, 0x71165, 0x71165, 0x71064, 0x71064, 0x81063, 0x80f63, 0x80f63, 0x80f62, 0x80e62, 0x80e62, 0x80e61, 0x80d61, 0x80d61, 0x80d60, 0x80c60, 0x80c60, 0x80c60, 0x80b5f, 0x80b5f, 0x80b5f, 0x80b5e, 0x80a5e, 0x80a5e, 0x80a5e, 0x8095d, 0x8095d, 0x58bece, 0x59bed1, 0x59bed1, 0x59bed1, 0x59bed1, 0x58bdd0, 0x58bdd0, 0x58bdd0)
//    val colors = IntArray(255) { it * 10 }
    val index = (m * 10 * (colors.size - 1)).toInt().coerceAtMost(colors.size - 1)
    val g = colors[index]
    return "#${g.asDynamic().toString(16)}"
}

fun mandelbrot(x: Int, y: Int, width: Int, height: Int): Double {
    val a = (x.toDouble() - width * 1.5) / 2400
    val b = (y.toDouble() - height * 2) / 2400
    fun nextA(curA: Double, curB: Double, firstA: Double, firstB: Double) = curA * curA - curB * curB + firstA
    fun nextB(curA: Double, curB: Double, firstA: Double, firstB: Double) = curA * curB + curA * curB + firstB

    var zA = 0.0
    var zB = 0.0

    repeat(512) {
        val zA2 = nextA(zA, zB, a, b)
        val zB2 = nextB(zA, zB, a, b)
        zA = zA2
        zB = zB2
        if (zA * zA + zB * zB > 4) {
            return it / 512.0
        }
    }
    return 1.0
}

fun main(args: Array<String>) {
    println("hello world")
    window.onload = { draw() }
    window.onresize= { draw() }
}

data class Complex(val a: Double, val b: Double) {
    operator fun times(o: Complex): Complex = Complex(a * o.a - b * o.b, a * o.b + b * o.a)
    operator fun plus(o: Complex): Complex = Complex(a + o.a, b + o.b)
    fun module(): Double = Math.sqrt(a * a + b * b)
}

fun mandelbrot2(x: Int, y: Int, width: Int, height: Int): Int {
    val a = (x.toDouble() - width / 2) / 300
    val b = (y.toDouble() - height / 2) / 300
    val z0 = Complex(a, b)
    var z = Complex(0.0, 0.0)
    repeat(255) {
        z = z * z + z0
        if (z.module() > 2) return it
    }
    return 255
}

//    (a + ib) * (c + id) = ac + iad + ibc + iibd = (ac - bd) + i(ad + bc)
// new = old * old + first

//    val img = ctx.createImageData(width.toDouble(), height.toDouble())
//    val data: Uint8ClampedArray = img.data
//    var i = 0
//    while (i < data.length) {
//        val x = i / 4 % width
//        val y = i / 4 / width
//        val color: dynamic = if (((x / 10) + (y / 10)) % 2 == 0) 0 else 255
//        val alpha: dynamic = 255
//        data[i + 0] = color
//        data[i + 1] = color
//        data[i + 2] = color
//        data[i + 3] = alpha
//        i += 4
//    }
//    ctx.putImageData(img, 0.5, 0.5)
//    ctx.translate(0.5, 0.5)
